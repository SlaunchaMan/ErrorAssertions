#if !canImport(ObjectiveC)
import XCTest

extension AssertTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AssertTests = [
        ("testAssertExpectationThreadDies", testAssertExpectationThreadDies),
        ("testAssertionFailureExpectationThreadDies", testAssertionFailureExpectationThreadDies),
        ("testAssertionFailuresDoNotContinueExecution", testAssertionFailuresDoNotContinueExecution),
        ("testAssertionFailuresSendExpectedErrors", testAssertionFailuresSendExpectedErrors),
        ("testAssertionFailureWithMessageWithoutCapturingError", testAssertionFailureWithMessageWithoutCapturingError),
        ("testAssertionFailureWithoutCapturingError", testAssertionFailureWithoutCapturingError),
        ("testAssertionMethodsAreReplacedAfterTestFinishes", testAssertionMethodsAreReplacedAfterTestFinishes),
        ("testAssertionsDoContinueExecution", testAssertionsDoContinueExecution),
        ("testAssertionsDoNotContinueExecution", testAssertionsDoNotContinueExecution),
        ("testDefaultErrorIsABlankAnonymousError", testDefaultErrorIsABlankAnonymousError),
        ("testDefaultErrorWithStringIsAnAnonymousError", testDefaultErrorWithStringIsAnAnonymousError),
        ("testExpectingNoAssertionFailure", testExpectingNoAssertionFailure),
        ("testNoAssertionFailureExpectationThreadDies", testNoAssertionFailureExpectationThreadDies),
    ]
}

extension FatalErrorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FatalErrorTests = [
        ("testDefaultErrorIsABlankAnonymousError", testDefaultErrorIsABlankAnonymousError),
        ("testDefaultErrorWithStringIsAnAnonymousError", testDefaultErrorWithStringIsAnAnonymousError),
        ("testExpectingNoFatalError", testExpectingNoFatalError),
        ("testFatalErrorExpectationThreadDies", testFatalErrorExpectationThreadDies),
        ("testFatalErrorMethodsAreReplacedAfterTestFinishes", testFatalErrorMethodsAreReplacedAfterTestFinishes),
        ("testFatalErrorsDoNotContinueExecution", testFatalErrorsDoNotContinueExecution),
        ("testFatalErrorsSendExpectedErrors", testFatalErrorsSendExpectedErrors),
        ("testFatalErrorWithMessageWithoutCapturingError", testFatalErrorWithMessageWithoutCapturingError),
        ("testFatalErrorWithoutCapturingError", testFatalErrorWithoutCapturingError),
        ("testNoFatalErrorExpectationThreadDies", testNoFatalErrorExpectationThreadDies),
    ]
}

extension PreconditionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PreconditionTests = [
        ("testDefaultErrorIsABlankAnonymousError", testDefaultErrorIsABlankAnonymousError),
        ("testDefaultErrorWithStringIsAnAnonymousError", testDefaultErrorWithStringIsAnAnonymousError),
        ("testExpectingNoPreconditionFailure", testExpectingNoPreconditionFailure),
        ("testNoPreconditionFailureExpectationThreadDies", testNoPreconditionFailureExpectationThreadDies),
        ("testPreconditionExpectationThreadDies", testPreconditionExpectationThreadDies),
        ("testPreconditionFailureExpectationThreadDies", testPreconditionFailureExpectationThreadDies),
        ("testPreconditionFailuresDoNotContinueExecution", testPreconditionFailuresDoNotContinueExecution),
        ("testPreconditionFailuresSendExpectedErrors", testPreconditionFailuresSendExpectedErrors),
        ("testPreconditionFailureWithMessageWithoutCapturingError", testPreconditionFailureWithMessageWithoutCapturingError),
        ("testPreconditionFailureWithoutCapturingError", testPreconditionFailureWithoutCapturingError),
        ("testPreconditionMethodsAreReplacedAfterTestFinishes", testPreconditionMethodsAreReplacedAfterTestFinishes),
        ("testPreconditionsThatFailDoNotContinueExecution", testPreconditionsThatFailDoNotContinueExecution),
        ("testPreconditionsThatSucceedDoContinueExecution", testPreconditionsThatSucceedDoContinueExecution),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(AssertTests.__allTests__AssertTests),
        testCase(FatalErrorTests.__allTests__FatalErrorTests),
        testCase(PreconditionTests.__allTests__PreconditionTests),
    ]
}
#endif
